# Initial dependency configuration. Customize as required.

# The options section describes global configuration
options:
  # The relative path to the workspace root directory that
  # contains the WORKSPACE file. Defaults to '..'
  workspaceDirectory: ..

  # The name of the generated extension file. Defaults to 'dependencies.bzl'
  #extensionFile: dependencies.bzl

  # The name of the macro that generates workspace rules and must be invoked from the
  # WORKSPACE file. Defaults to 'generate_workspace_rules'
  #workspaceMacroName: generate_workspace_rules

  # The name of the macro that defines targets and must be invoked from a BUILD file.
  # Defaults to 'generate_targets'
  #targetMacroName: generate_targets

  # The prefix that is added to any rule, target or macro defined. If the workspaceMacroName
  # or the targetMacroName configuration is explicitly specified then this setting will no
  # prefix those names but all other names will be prefixed. Defaults to ''.
  #namePrefix: ''

  # The tool generates aliases for dependency targets that can be consumed by users of the tool.
  # Different strategies can be used to name the aliases. the default strategy is 'GroupIdAndArtifactId'
  # Strategies include:
  # - GroupIdAndArtifactId: The alias uses both the groupId and artifactId when constructing the alias.
  #   So the artifact 'org.realityforge.react4j:react4j-core:0.126' has an alias
  #   'org_realityforge_react4j__react4j_core'
  # - ArtifactId: The alias uses the artifactId when constructing the alias.
  #   So the artifact 'org.realityforge.react4j:react4j-core:0.126' has an alias 'react4j_core'
  #aliasStrategy: GroupIdAndArtifactId

  # Artifacts have 1 or more natures. A nature defines the type of targets that are created for an
  # artifact. Does the artifact result in a 'j2cl_library', a 'java_library', a 'java_plugin' or something
  # else. This configuration setting specifies the default nature of any artifacts unless otherwise
  # specified at the artifact level. If left unspecified the nature is assumed to be 'Java' unless there are
  # annotation processors defined in the manifest in which case the artifact is assumed to be the 'Plugin' nature.
  # It should be noted that natures will also impact the nature of the artifacts dependencies. If an artifacts
  # nature is 'J2cl' then any dependencies are assumed to be of 'J2cl' nature.
  # Natures include:
  #  - Java: artifacts are exposed using 'java_import' rule.
  #  - Plugin: artifact is exposed as a 'java_library' that exports 'java_plugin' rules.
  #  - J2cl: artifact is exposed as a 'j2cl_library' rule.
  #defaultNature: Java

  # Should the tool fail if it encounters an invalid POM file. Defaults to 'true'.
  #failOnInvalidPom: true

  # Should the tool fail if a POM file is missing. Defaults to 'true'.
  #failOnMissingPom: true

  # Should the tool print a dependency graph inside the generated extension file. This dependency
  # graph is closely modelled on the Maven dependency graph ad is useful when inspecting or debugging
  # the dependency graph. Defaults to 'true'.
  #emitDependencyGraph: true

  # Should the tool generate repository rules and targets for 'sources' classifier of the artifacts.
  # The tool will also link the sources artifact to the binary artifact if the nature allows such
  # linking. i.e. java_import targets will define the 'srcjar' artifact. Defaults to 'true'.
  #includeSource: true

  # This configuration setting controls whether the `annotations` classifier artifact is downloaded.
  # The `annotations` classifier artifacts is used by IntelliJ IDEA to store annotations outside the
  # source code. This is particularly useful for IDEA users where it allows the IDE to apply additional
  # validation and provide hints to users of the artifact. If the the `annotations` classifier artifact
  # is not found in the remote repository but this configuration setting is true, the tool does not
  # consider it an error and silently ignores this scenario. Defaults to 'false'.
  #includeExternalAnnotations: false

  # Should the tool generate java_import targets with exports attribute that exports all dependencies.
  # Exporting dependencies is usually discouraged in Bazel but Maven's model is one such that exportDeps
  # is the default and thus sometimes it is desirable to enable this feature. Defaults to 'false'.
  #exportDeps: false

  # Some bazel workspaces are intended to be consumed by other projects. In these scenarios it is not
  # uncommon to want to customize the set of dependencies used. The tool supports this use case by
  # adding boolean parameters to the macros that direct the macro to skip the declaration of the the
  # repository rules or targets. There is one parameter per artifact named in the form "omit_[alias]".
  # Defaults to 'false'.
  #supportDependencyOmit: false

  # If this setting is set to true then bazel will verify that the content of this configuration file
  # has not been changed since the bazel extension was generated. If the configuration is out of date
  # with respect to the generated extension and the build attempts to resolve a target then an error
  # will be generated. Defaults to 'true'.
  #verifyConfigSha256: true

# The repositories section configures the repositories that the tool will use when resolving dependencies.
# If not specified, a repository named "central" with a url "https://repo.maven.apache.org/maven2/" will
# be configured. The section is an array of repository configurations.
repositories:

  # Every repository has a symbolic name. These names are used when referring to the repository from
  # artifact configurations. The name is also used as the key when caching repository+artifact details.
  # This setting MUST be specified.
  - name: central

    # The url of the repository. The repository is expected to be laid out using Maven2 layout strategy.
    # The support url schemes include file, http and https.
    url: https://repo.maven.apache.org/maven2/

    # Should the tool cache artifact lookups to this repository. If caching is enabled then the results
    # of the lookup will be stored in the cacheDirectory and successive runs of the tool will not
    # attempt to access the repository again which speeds up the tool significantly. This is useful when
    # the artifacts are not changed or removed from the repository as in public repositories such as Maven
    # central. The tool also caches negative results when looking up artifacts so occasionally it is necessary
    # to ignore the cached details when an artifact has been added to a repository. In this scenario a separate
    # command line option is provided. This configuration is primary used for snapshot repositories and other
    # repositories that can remove or modify artifacts. Defaults to 'true'.
    #cacheLookups: true

    # Should this repository by searched by default when looking up artifacts. If this configuration is set
    # to false then only artifacts that explicitly reference this repository will attempt lookups in the
    # repository. Defaults to 'true'.
    #searchByDefault: true

  # The user can specify as many different repositories as required. See below for some other popular repositories.
  #- name: spring-releases
  #  url: https://repo.spring.io/release
  #- name: android
  #  url: https://dl.google.com/dl/android/maven2
  #- name: jboss-releases
  #  url: https://repository.jboss.org/nexus/content/repositories/releases/

# The artifacts section defines the artifacts that will be exposed by the generated extension.
# The section is a list of artifact configurations.
#artifacts:

  # All artifacts must specify the coords property containing the maven coordinates of the dependency.
  # They may optional declare one or configuration properties that will change the way the tool treats
  # the artifact.

  # The artifact coordinates can be defined using a 2-5 parts. The 2-part form declares the groupId
  # and the artifactId and assumes that another artifact declaration will transitively reference the
  # artifact. This form is used to customize the configuration of the artifact or to expose the artifact
  # so that it is visible to other parts of the build. All other forms of the coord indicate a top-level
  # artifact that forms a root when resolving the dependency graph. The forms are as follows:
  #   * [groupId]:[artifactId]
  #   * [groupId]:[artifactId]:[version]
  #   * [groupId]:[artifactId]:[type]:[version]
  #   * [groupId]:[artifactId]:[type]:[classifier]:[version]

  #- coord: org.realityforge.react4j:react4j-core:0.126

    # This settings allows per-artifact overrides of the global aliasStrategy configuration.
    #aliasStrategy: ArtifactId

    # This settings allows per-artifact overrides of the global includeSource configuration.
    #includeSource: false

    # This settings allows per-artifact overrides of the global includeExternalAnnotations configuration.
    #includeExternalAnnotations: true

    # This settings allows per-artifact overrides of the global exportDeps configuration.
    #exportDeps: true

    # This configuration controls whether optional dependencies for this artifact are included when resolving
    # the dependency graph. Defaults to 'false'.
    #includeOptional: false

    # Specifies an array of dependency coordinates that are excluded when this artifact. Like the global
    # configuration setting, excludes are defined as a 2-part [groupId]:[artifactId] coordinate. Unlike
    # the global configuration setting, the excludes only apply to transitive dependencies of this artifact.
    #excludes:
      #- com.google.jsinterop:base
      #- com.google.jsinterop:jsinterop-annotations

    # The visibility specifies the visibility of the alias that references the artifact. If not specified
    # then the alias has no visibility specified and thus has the default visibility of the module.
    #visibility: ["//visibility:public"]

    # The plugins section is used to customize the artifact if it has the Plugin nature
    # and should only be present if the artifact has the Plugin nature
    #plugin:

      # Should the tool mark annotation processors as generating API code?
      # See https://docs.bazel.build/versions/master/be/java.html#java_plugin.generates_api for
      # a discussion on the performance impact of not setting this. As many annotation processors
      # generate API code and setting this to false by default would cause these builds to fail,
      # the tool deliberately takes the opposite default from Bazel and defaults to true.
      # This can be overridden and changed to false if the annotation processor supports this.
      #generatesApi: false

# The excludes section identifies artifacts that should never be added to artifact graph. The exclusion occurs
# during artifact resolution and thus no transitive dependencies of the excluded dependencies are included in
# the graph. The excludes section is an array of exclusion configuration.
#excludes:

  # Every exclusion is identified by a two part coordinate consisting of a groupId and artifactId
  # in the form [groupId]:[artifactId]. i.e. the below excludes every artifact with id 'base' in group
  # 'com.google.jsinterop' regardless of the version, artifact type or classifier.
  #- coord: com.google.jsinterop:base

# The replacements section identifies artifacts that should be replaced by different targets.
# This is useful when you want to replace a dependency with a local target or another target.
# Unlike the excludes section which removes an artifact from the graph, the replacements will
# keep the dependency but replace it with a different target. The replacement target may be
# different for different natures and thus it is required that for each nature of the artifact
# must have a separate replacement target. The replacements section is an array of replacement
# configurations.
#replacements:

  # Each replacement is defined by the coordinate of the artifact that it replaces.
  # and a target per nature.
  #- coord: com.google.elemental2:elemental2-promise
  #  targets:
      # A target is defines a replacement rule for a particular nature
      #- target: "@com_google_elemental2//:elemental2-dom-j2cl"
      #  nature: J2cl

      # If a target does not specify a nature then the defaultNature is assumed.
      #- target: ":org_realityforge_com_google_elemental2__elemental2_promise"

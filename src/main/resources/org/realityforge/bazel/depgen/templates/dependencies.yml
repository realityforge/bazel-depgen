# Initial dependency configuration. Customize as required.
options:
  # The relative path to the workspace root directory that
  # contains the WORKSPACE file. Defaults to '..'
  workspaceDirectory: ..

  # The name of the generated extension file. Defaults to 'dependencies.bzl'
  #extensionFile: dependencies.bzl

  # The name of the macro that generates workspace rules and must be invoked from the
  # WORKSPACE file. Defaults to 'generate_workspace_rules'
  #workspaceMacroName: generate_workspace_rules

  # The name of the macro that defines targets and must be invoked from a BUILD file.
  # Defaults to 'generate_targets'
  #targetMacroName: generate_targets

  # The prefix that is added to any rule, target or macro defined. If the workspaceMacroName
  # or the targetMacroName configuration is explicitly specified then this setting will no
  # prefix those names but all other names will be prefixed. Defaults to ''.
  #namePrefix: ''

  # The tool generates aliases for dependency targets that can be consumed by users of the tool.
  # Different strategies can be used to name the aliases. the default strategy is 'GroupIdAndArtifactId'
  # Strategies include:
  # - GroupIdAndArtifactId: The alias uses both the groupId and artifactId when constructing the alias.
  #   So the artifact 'org.realityforge.react4j:react4j-core:0.126' has an alias
  #   'org_realityforge_react4j__react4j_core'
  # - ArtifactId: The alias uses the artifactId when constructing the alias.
  #   So the artifact 'org.realityforge.react4j:react4j-core:0.126' has an alias 'react4j_core'
  #aliasStrategy: GroupIdAndArtifactId

  #defaultNature: Java

  # Should the tool fail if it encounters an invalid POM file. Defaults to 'true'.
  #failOnInvalidPom: true

  # Should the tool fail if a POM file is missing. Defaults to 'true'.
  #failOnMissingPom: true

  # Should the tool print a dependency graph inside the generated extension file. This dependency
  # graph is closely modelled on the Maven dependency graph ad is useful when inspecting or debugging
  # the dependency graph. Defaults to 'true'.
  #emitDependencyGraph: true

  # Should the tool generate repository rules and targets for 'sources' classifier of the artifacts.
  # The tool will also link the sources artifact to the binary artifact if the nature allows such
  # linking. i.e. java_import targets will define the 'srcjar' artifact. Defaults to 'true'.
  #includeSource: true

  # This configuration setting controls whether the `annotations` classifier artifact is downloaded.
  # The `annotations` classifier artifacts is used by IntelliJ IDEA to store annotations outside the
  # source code. This is particularly useful for IDEA users where it allows the IDE to apply additional
  # validation and provide hints to users of the artifact. If the the `annotations` classifier artifact
  # is not found in the remote repository but this configuration setting is true, the tool does not
  # consider it an error and silently ignores this scenario. Defaults to 'false'.
  #includeExternalAnnotations: false

  # Should the tool generate java_import targets with exports attribute that exports all dependencies.
  # Exporting dependencies is usually discouraged in Bazel but Maven's model is one such that exportDeps
  # is the default and thus sometimes it is desirable to enable this feature. Defaults to 'false'.
  #exportDeps: false

  # Some bazel workspaces are intended to be consumed by other projects. In these scenarios it is not
  # uncommon to want to customize the set of dependencies used. The tool supports this use case by
  # adding boolean parameters to the macros that direct the macro to skip the declaration of the the
  # repository rules or targets. There is one parameter per artifact named in the form "omit_[alias]".
  # Defaults to 'false'.
  #supportDependencyOmit: false

  # If this setting is set to true then bazel will verify that the content of this configuration file
  # has not been changed since the bazel extension was generated. If the configuration is out of date
  # with respect to the generated extension and the build attempts to resolve a target then an error
  # will be generated. Defaults to 'true'.
  #verifyConfigSha256: true
